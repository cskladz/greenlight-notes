{"title":"REDUCE","message":"reduces an array or object to a single value by repetitively calling `iterator(accumulator,item` for each item.\nAccumulator should be the return value of the previous iterator call. you have to return the accumulator, whatever you return will become the accumulator.\nYou can pass in a starting value for the accumulator as the third argument in the `iterator` If no starting value is given (third parameter left empty) the first element will be used as the accumulator.\n\nin other words, in the case where a starting value is not passed, the iterator is not invoked until the second element, with the first element as its second argument.\n\nis typeof element always going to be typeof the single value returned\n\nReduce Inputs: Collection, Callback, Accumulator(opitional)\nReduce Outputs: Accumulator\n\nCallback Inputs: accumulator, value, key, collection\nCallback Outputs:accumulator\n\nThe Three Arguments for Reduce:\narray, combine/callback function, seed\n\nconst sum = [13, 15, 1, 2].reduce( (sum, num) => { return sum + num;}, 0);\n\nCombine(Accumulator)Function\nThe callback function passed to reduce...has 4 parameter:\n\n\"1:. preVal: Seed value Or the last value returned from the previous call of the callback function OR first element in the given array.\"\n\"2: curEl: current element in the array\"\n\"3: i: current index of array\"\n\"4: array: referenced to the array passed into reduce\"\n\nconst combine = (preVal, curVal, i, array) => {\n//combine the preval with curVal in some way\n//return newly combined value\n}\n\nNaming parameters on a callback function.\n\n**NAME THE PARAMETERS TO THE CALLBACK FUNCTION PROPERLY!**\nsuggested pattern:\n\t-- preVal - name for the final result you want from reduce. ex) sum, longestword, count...\n\t--curVal - singular of the contents of arrau. ex) num, word, game, order.\n\t\n\tconst sum = nums.reduce((sum, num) => sum + num, 0)\n\t\n\tconst longestWord = words.reduce((longestWord, word) => {\n\t\tif(longestWord.length > word.length) {\n\t\treturn longestWord;\n\t\t}\n\t\treturn word;\n\t}, \"\");\n\t\n\tSeed\n\t\t-Intial value passed to the callback function as prevVal\n\t\t-like a real seed, it is used only once\n\t\t-should be the same 'type' as the value you want reduce to produce\n\t\t-if not provided, the first element of the array will be used as the seed...be careful.\n\t\n\t","id":"fe0daf60-cd2e-45a3-8f8a-69f5d0a93ce0","date":"2018-08-16T00:01:14.141Z"}